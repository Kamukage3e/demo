name: Manual Deploy Infrastructure

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]
    paths:
      - 'infra/**'
      - 'app/**'
  workflow_dispatch:  # Manual trigger only for apply
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply

env:
  TERRAFORM_VERSION: 1.10.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build Lambda function
      run: |
        cd app/lambda-jobs-api
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o bootstrap main.go
        zip lambda.zip bootstrap
    
    - name: Upload Lambda artifact
      uses: actions/upload-artifact@v4
      with:
        name: lambda-zip
        path: app/lambda-jobs-api/lambda.zip

  terraform-plan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Lambda artifact
      uses: actions/download-artifact@v4
      with:
        name: lambda-zip
        path: app/lambda-jobs-api/
    
    - name: Determine Environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract AWS region from tfvars
      id: extract-region
      run: |
        REGION=$(grep '^region' infra/live/${{ steps.env.outputs.environment }}/terraform.tfvars | cut -d'"' -f2)
        echo "aws_region=$REGION" >> $GITHUB_OUTPUT
      working-directory: .
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ steps.extract-region.outputs.aws_region }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/live/${{ steps.env.outputs.environment }}
    
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra/live/${{ steps.env.outputs.environment }}
    
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > plan.txt
      working-directory: ./infra/live/${{ steps.env.outputs.environment }}
    
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ steps.env.outputs.environment }}
        path: |
          infra/live/${{ steps.env.outputs.environment }}/tfplan
          infra/live/${{ steps.env.outputs.environment }}/plan.txt
    
    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infra/live/${{ steps.env.outputs.environment }}/plan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          const body = plan.length > maxGitHubBodyCharacters ? 
            `## ðŸ“‹ Manual Terraform Plan - ${{ steps.env.outputs.environment }}
            
            \`\`\`
            ${plan.substring(0, maxGitHubBodyCharacters)}
            \`\`\`
            
            *Plan output truncated due to size limits.*
            
            **Note**: Use the Smart GitOps workflow for automatic deployments, or manually trigger this workflow for custom operations.` : 
            `## ðŸ“‹ Manual Terraform Plan - ${{ steps.env.outputs.environment }}
            
            \`\`\`
            ${plan}
            \`\`\`
            
            **Note**: Use the Smart GitOps workflow for automatic deployments, or manually trigger this workflow for custom operations.`;
          
          // Delete previous comments from this workflow
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Manual Terraform Plan')
          });
          
          if (botComment) {
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }
          
          // Create new comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  terraform-apply:
    runs-on: ubuntu-latest
    needs: [build, terraform-plan]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    environment: 
      name: manual-deploy-${{ github.event.inputs.environment }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Lambda artifact
      uses: actions/download-artifact@v4
      with:
        name: lambda-zip
        path: app/lambda-jobs-api/
    
    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment }}
        path: infra/live/${{ github.event.inputs.environment }}/
    
    - name: Extract AWS region from tfvars
      id: extract-region
      run: |
        REGION=$(grep '^region' infra/live/${{ github.event.inputs.environment }}/terraform.tfvars | cut -d'"' -f2)
        echo "aws_region=$REGION" >> $GITHUB_OUTPUT
      working-directory: .
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ steps.extract-region.outputs.aws_region }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/live/${{ github.event.inputs.environment }}
    
    - name: Manual Deploy Warning
      run: |
        echo "ðŸ”§ MANUAL DEPLOYMENT IN PROGRESS ðŸ”§"
        echo ""
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Triggered by: ${{ github.actor }}"
        echo ""
        echo "ðŸ’¡ TIP: For automatic deployments, use commit message conventions with the Smart GitOps workflow"
        echo "Example: git commit -m 'feat: add new feature [deploy] to staging'"
    
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./infra/live/${{ github.event.inputs.environment }}
    
    - name: Output Summary
      run: terraform output -json > outputs.json && cat outputs.json
      working-directory: ./infra/live/${{ github.event.inputs.environment }}
    
    - name: Upload Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-manual-${{ github.event.inputs.environment }}
        path: infra/live/${{ github.event.inputs.environment }}/outputs.json
    
    - name: Deployment Complete
      run: |
        echo "## âœ… Manual Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**ðŸ’¡ Future deployments:** Use Smart GitOps workflow with commit message conventions for automatic deployments"
